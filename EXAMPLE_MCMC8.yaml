timing: False
debug: False
stop_at_error: False

likelihood:
  gaussian_mixture:
    input_params_prefix: test_
    means: [ [0.1,0.1] ]
    covs:  [ [[0.01, 0],
              [0,    0.05]] ]

params:
  test_a:
    prior:
      min: -0.4
      max: 0.6
    ref:
      dist: norm
      loc: 0.1
      scale: 0.05
    proposal: 0.05
    latex: a
  test_b:
    prior:
      min: -0.4
      max: 0.6
    ref:
      dist: norm
      loc: 0.1
      scale: 0.05
    proposal: 0.05
    latex: a
 
sampler:
  mcmc:
    # ---------------------------------------------------------------------
    # File (w/ path) or matrix defining a covariance matrix for the proposal:
    # - null (default): will be generated from params info (prior and proposal)
    # - matrix: remember to set `covmat_params` to the parameters in the matrix
    covmat: 
    covmat_params:
    # --------------------------------------
    # --------------------------------------
    # Proposal covariance matrix learning
    # --------------------------------------
    # --------------------------------------
    learn_proposal: True
    # Don't learn if convergence better than...
    learn_proposal_Rminus1_min: 0.03
    # Don't learn if convergence is worse than...
    learn_proposal_Rminus1_max: 15.
    # (even earlier if a param is not in the given covariance matrix)
    learn_proposal_Rminus1_max_early: 30.
    # --------------------------------------
    # --------------------------------------
    # Convergence and stopping
    # --------------------------------------
    # --------------------------------------
    # Maximum number of posterior evaluations
    max_samples: .inf
    # Gelman-Rubin R-1 on means
    Rminus1_stop: 0.02
    # Gelman-Rubin R-1 on std deviations
    Rminus1_cl_stop: 0.2
    Rminus1_cl_level: 0.95
    # --------------------------------------
    # --------------------------------------
    # Exploiting speed hierarchy
    # --------------------------------------
    # --------------------------------------
    measure_speeds: False
    drag: False
    #blocking:
    #  - [50,
    #      [
    #        test_a, test_b
    #      ]
    #    ]
    oversample_power: 0.2
    oversample_thin: True
    # --------------------------------------
    # --------------------------------------
    # Avoid chain getting suck forever
    # --------------------------------------
    # --------------------------------------
    max_tries: .inf
    burn_in: 0
    # ---------------------------------------------------------------------
    # ---------------------------------------------------------------------
    # When no MPI used, number of fractions of the chain to compare
    # ---------------------------------------------------------------------
    # ---------------------------------------------------------------------
    Rminus1_single_split: 4

output: ./projects/lsst_y1/chains/EXAMPLE_MCMC8
